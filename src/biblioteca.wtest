/*

████████╗███████╗███████╗████████╗███████╗
╚══██╔══╝██╔════╝██╔════╝╚══██╔══╝██╔════╝
   ██║   █████╗  ███████╗   ██║   ███████╗
   ██║   ██╔══╝  ╚════██║   ██║   ╚════██║
   ██║   ███████╗███████║   ██║   ███████║
   ╚═╝   ╚══════╝╚══════╝   ╚═╝   ╚══════╝

*/

import biblioteca.*


// PARTE 1 (LIBROS)
describe "Tests parte 1 integrante 1" {
	test "La valoracion para la version ilustrada de Fahrenheit " {
		fahrenheit.actualizoVersion("ilustrada")
		assert.equals(8000,fahrenheit.valoracion())
	}
    test "La valoracion para la version no ilustrada de Fahrenheit " {
		fahrenheit.actualizoVersion("texto")
		assert.equals(3500,fahrenheit.valoracion())
	}

	test "Version no ilustrada de fahrenheit cuesta 5000 patacones" {
		fahrenheit.actualizoVersion("texto")
		patricia.ponerseDeBuenHumor()
		assert.equals(5000,fahrenheit.precio())
	}
	test "Version ilustrada de fahrenheit cuesta 6000 patacones" {
		fahrenheit.actualizoVersion("ilustrada")
		patricia.ponerseDeBuenHumor()
		assert.equals(6000,fahrenheit.precio())
	}
}

describe "Tests parte 1 integrante 2" {
	test "El precio con un precio base par" {
		cuidadoConElPerro.ajustarPrecioBase(2900)
		assert.equals(3400,cuidadoConElPerro.precio())
	}

	test "El precio con un precio base impar (2901)" {
		cuidadoConElPerro.ajustarPrecioBase(2901)
		assert.equals(3501,cuidadoConElPerro.precio())
	}

	test "La valoracion con el precio base par" {
		cuidadoConElPerro.ajustarPrecioBase(2900)
		assert.equals(6700,cuidadoConElPerro.valoracion())
	}
}

describe "Tests parte 1 integrante 3" {
	test "Valor imaginario de Patrones de Diseño"{
		assert.equals(462,patronesDeDisenio.valorImaginario())
	}
	test "Valoracion de Patrones de Diseño"{
		assert.equals(4924,patronesDeDisenio.valoracion())
	}
	test "Precio de Patrones de Diseño"{
		assert.equals(5000,patronesDeDisenio.precio())
	}
	test "Precio de Patrones de Diseño con dos likes mas"{
		patronesDeDisenio.sumarLikes(2)
		assert.equals(6000,patronesDeDisenio.precio())
	}
}


// PARTE 2 (PERSONAS)
describe "Tests parte 2 integrante 1" {

	test "Para Ciudado con el perro" {
		assert.that(cristina.leGustaElLibro(cuidadoConElPerro))
	}
	test "Para Fahrenheit 451 sin ilustrar" {
		assert.notThat(cristina.leGustaElLibro(fahrenheit))
	}
	test "Para Fahrenheit 451 con ilustraciones" {
		fahrenheit.actualizoVersion("ilustrado")
		assert.that(cristina.leGustaElLibro(fahrenheit))
	}
}

describe "Tests parte 2 integrante 2" {
	test "A Roberto no le gusta 'Cuidado con el Perro'?" {
		assert.notThat(roberto.leGustaElLibro(cuidadoConElPerro))
	}

	test "A Roberto le gusta 'Patrones de Disenio'?" {
		assert.that(roberto.leGustaElLibro(patronesDeDisenio))
	}
}

describe "Tests parte 2 integrante 3" {
	test "Patricia esta de humor y le gusta 'Cuidado con el Perro'" {
		patricia.ponerseDeBuenHumor()
		assert.that(patricia.leGustaElLibro(cuidadoConElPerro))
	}
	test "Patricia no esta de humor y no le gusta 'Cuidado con el Perro'" {
		patricia.ponerseDeMalHumor()
		assert.notThat(patricia.leGustaElLibro(cuidadoConElPerro))
	}
	test "Patricia no esta de humor y le gusta 'Patrones de diseño'" {
		patricia.ponerseDeMalHumor()
		assert.that(patricia.leGustaElLibro(patronesDeDisenio))
	}
}

/*
	███████╗███╗   ██╗████████╗██████╗ ███████╗ ██████╗  █████╗     ██████╗
	██╔════╝████╗  ██║╚══██╔══╝██╔══██╗██╔════╝██╔════╝ ██╔══██╗    ╚════██╗
	█████╗  ██╔██╗ ██║   ██║   ██████╔╝█████╗  ██║  ███╗███████║     █████╔╝
	██╔══╝  ██║╚██╗██║   ██║   ██╔══██╗██╔══╝  ██║   ██║██╔══██║    ██╔═══╝
	███████╗██║ ╚████║   ██║   ██║  ██║███████╗╚██████╔╝██║  ██║    ███████╗
	╚══════╝╚═╝  ╚═══╝   ╚═╝   ╚═╝  ╚═╝╚══════╝ ╚═════╝ ╚═╝  ╚═╝    ╚══════╝
*/


describe "Tests Entrega 2" {
	/*
	┌──────────────────────────┐
	│                          │
	│     CASOS DE PRUEBAS     │
	│                          │
	└──────────────────────────┘
	*/

	/* Para los, en los test inicializamos el objeto de la clase Libro
	 * con un precio extra fijo, en ves de usar el generador de numeros aleatorios,
	 * evtando FLAKY TESTS */
  const elPrincipito = new Libro(autor = "Antoine de Saint-Exupéry", paginas = 96, precioExtra = 1500)
	const laMetamorfosis = new Libro(autor = "Franz Kafka", paginas = 96, precioExtra = 1500)
	const elViejoYElMar = new Libro(autor = "Ernest Hemingway", paginas = 127, precioExtra = 1500)
	const laCarretera = new Libro(autor = "Cormac McCarthy", paginas = 128, precioExtra = 1500)
	const elArteDeAmar = new Libro(autor = "Erich Fromm", paginas = 120, precioExtra = 1500)

	const cienAnosDeSoledad = new Libro(autor = "Gabriel García Márquez", paginas = 417, precioExtra = 1500)
	const matarAUnRuisenor = new Libro(autor = "Harper Lee", paginas = 281, precioExtra = 1500)
	const losJuegosDelHambre = new Libro(autor = "Suzanne Collins", paginas = 374, precioExtra = 1500)
	const elHobbit = new Libro(autor = "J.R.R. Tolkien", paginas = 310, precioExtra = 1500)
	const milNovecientosOchentaYCuatro = new Libro(autor = "George Orwell", paginas = 328, precioExtra = 1500)

	/* Para las compras, en los test inicializamos el objeto de la clase Compra
	 * con una fecha que sea viernes y otra que cae un lunes, con eso cubrimos las clases
	 * de equivalencia y evitamos que la compra tome la fecha del sistema */
	const compraLunes = new Compra(fechaCompra = new Date(day = 16,month = 10, year = 2023))
	const compraViernes = new Compra(fechaCompra = new Date(day = 13,month = 10, year = 2023))
	const compraAutores = new Compra()
	const compraValoracion = new Compra()

	const persona1 = new Persona(dinero = 20000, limiteValoracion = 3800)
	const persona2 = new Persona(dinero = 20000, limiteValoracion = 3800)
	const persona3 = new Persona(dinero = 20000, limiteValoracion = 3800)
	const persona4 = new Persona(dinero = 20000, limiteValoracion = 3800) // + valoracion + precio en principito
	const persona5 = new Persona(dinero = 20000, limiteValoracion = 7000) // - valoracion + precio en principito
	const persona6 = new Persona(limiteValoracion = 3800) // + valoracion - precio en principito
	const persona7 = new Persona(limiteValoracion = 7000) // - valoracion - precio en principito

	const compraLimite = new Compra(fechaCompra = new Date(day = 16,month = 10, year = 2023)) // LUNES
	const compraSeptiembre =  new Compra(fechaCompra = new Date(day = 14,month = 9, year = 2023))
	const compraOctubre =  new Compra(fechaCompra = new Date(day = 14,month = 10, year = 2023))

  // "define" para que sea mas legible cuando pasamos un mes como parametro
	const SEPTIEMBRE = 9
	const OCTUBRE = 10

	// Generador de reviews
	method initialize(){
		elHobbit.hacerReview(10, "Me encantó")
		elHobbit.hacerReview(5, "Buen libro")
		elHobbit.hacerReview(15, "Fascinante")
		elHobbit.hacerReview(3, "No me gustó")
		elHobbit.hacerReview(18, "Recomendado")
		elHobbit.hacerReview(7, "Entretenido")
		elHobbit.hacerReview(12, "Muy interesante")
		elHobbit.hacerReview(0, "Pésimo")
		elHobbit.hacerReview(20, "Increíblemente bueno")
		elHobbit.hacerReview(8, "Me dejó pensando")

		compraLunes.agregarLibro(elPrincipito)
		compraLunes.agregarLibro(elViejoYElMar)
		compraLunes.agregarCupon("RX7FD3S")
		compraLunes.agregarCupon("K20Z3")

		compraViernes.agregarLibro(elPrincipito)
		compraViernes.agregarLibro(elViejoYElMar)
		compraViernes.agregarCupon("RX7FD3S")
		compraViernes.agregarCupon("K20Z3")

		compraAutores.agregarLibro(elPrincipito)
		compraAutores.agregarLibro(elViejoYElMar)

		compraValoracion.agregarLibro(laMetamorfosis) // 96 paginas
		compraValoracion.agregarLibro(losJuegosDelHambre) // 374 paginas
	}

	/* Stub para testear las compras de un mes especifico para no depender del mes
	que tenga la hora del sistema */
	method comprasMes(persona,mes) =
		persona.compras().filter({ compra => compra.mesCompra() == mes })

	/*
	┌──────────────────────────┐
	│                          │
	│      INTEGRANTE 1        │
	│                          │
	└──────────────────────────┘
	*/

	// Valoraciones
	test "Valoracion ClaseEQ 1/2 - Libro con 150 paginas o menos: 'El Arte De Amar' que tiene 120 paginas" {
		assert.equals(6000, elArteDeAmar.valoracion())
	}
	test "Valoracion ClaseEQ 2/2 - Libro con mas de 150 paginas: 'Cien Anos De Soledad' que tiene 417 paginas" {
		assert.equals(7000, cienAnosDeSoledad.valoracion())
	}
	// Precios
	test "Precio ClaseEQ 1/2 - Libro de menos de 200 paginas (menos de 1000 patacones extra): 'El Principito' con 96 paginas (extra 'random' en 1500)" {
		assert.equals(4980, elPrincipito.precio())
	}
	test "Precio ClaseEQ 2/2 - Libro con 200 o mas paginas (topea con 1000 patacones extra): 'El Hobbit' con 310 paginas (extra 'random' en 1500)" {
		assert.equals(5500, elHobbit.precio())
	}
	// Excepciones
	test "Review muy corta, debe tirar excepcion" {
		assert.throwsExceptionWithType(new UserException(message = "El comentario del review debe tener al menos 5 carácteres"),{ elHobbit.hacerReview(5,"coso") })
	}
	test "Review con valor negativo, debe tirar excepcion" {
		assert.throwsExceptionWithType(new UserException(message = "El puntaje del review no puede ser negativo"),{ elHobbit.hacerReview(-1,"review negativa") })
	}
	// Reviews
	test "Filtrar reviews grosas" {
		assert.equals(5, elHobbit.reviewsGrosas().size())
	}
	test "Puntaje promedio de reviews" {
		assert.equals(9.8, elHobbit.promedioReviews())
	}

	/*
  	┌──────────────────────────┐
	│                          │
	│      INTEGRANTE 2        │
	│                          │
	└──────────────────────────┘
	*/

	test "Le gusta ClaseEQ 1/4 - Le gusta el libro (cumple precio y valoración)"{
		assert.that(persona4.leGustaLibro(elPrincipito))
	}
	test "Le gusta ClaseEQ 2/4 - No le gusta el libro (cumple con precio pero no con valoración)"{
		assert.notThat(persona5.leGustaLibro(elPrincipito))
	}
	test "Le gusta ClaseEQ 3/4 - No le gusta el libro (cumple valoracion pero no con el precio)"{
		assert.notThat(persona6.leGustaLibro(elPrincipito))
	}
	test "Le gusta ClaseEQ 4/4 - No le gusta el libro (no cumple con el precio ni con la valoracion)"{
		assert.notThat(persona7.leGustaLibro(elPrincipito))
	}

	test "Compras caras ClaseEQ 1/2: El total de las compras NO supera los 8000 patacones de limite" {
		compraLimite.agregarLibro(laCarretera)
		persona1.agregarCompra(compraLimite)
		assert.notThat(persona1.tieneComprasCaras())
	}

	test "Compras caras ClaseEQ 2/2: El total de las compras supera los 8000 patacones de limite" {
		compraLimite.agregarLibro(laCarretera)
		compraLimite.agregarLibro(elHobbit)
		persona1.agregarCompra(compraLimite)
		assert.that(persona1.tieneComprasCaras())
	}


	test "Compras mes ClaseEQ 1/2: Persona con compras en setiembre y se evalua en octubre"{
		compraSeptiembre.agregarLibro(patronesDeDisenio)
		persona2.agregarCompra(compraSeptiembre)
		assert.that(self.comprasMes(persona2,OCTUBRE).size() == 0) // Octubre harcodeado en un const, linea 166
	}
	test "Compras mes ClaseEQ 2/2: Persona con compras en octubre y se evalua en octubre"{
		compraOctubre.agregarLibro(patronesDeDisenio)
		persona3.agregarCompra(compraOctubre)
		assert.that(self.comprasMes(persona3,OCTUBRE).size() > 0) // Octubre harcodeado en un const, linea 166
	}


	/*
	┌──────────────────────────┐
	│                          │
	│      INTEGRANTE 3        │
	│                          │
	└──────────────────────────┘
	*/

	test "Precio compra ClaseEQ 1/4 - 'El Principito' y 'El Viejo Y El Mar', sin cupon un dia lunes" {
		assert.equals(10115, compraLunes.precioTotal())
	}
	test "Precio compra ClaseEQ 2/4 - 'El Principito' y 'El Viejo Y El Mar', con cupon un dia lunes" {
		assert.equals(9103.5, compraLunes.precioTotal("RX7FD3S"))
	}
	test "Precio compra ClaseEQ 3/4 - 'El Principito' y 'El Viejo Y El Mar', sin cupon un dia viernes" {
		assert.equals(8092, compraViernes.precioTotal())
	}
	test "Precio compra ClaseEQ 4/4 - 'El Principito' y 'El Viejo Y El Mar', con cupon un dia viernes" {
		assert.equals(7282.8, compraViernes.precioTotal("RX7FD3S"))
	}

	test "Que libros de la compra tienen más de 4.000 quintines de valoracion" {
		assert.that(compraValoracion.bienValorados() == [laMetamorfosis,losJuegosDelHambre])
	}

	// Como está planteado el enunciado, no existe ninguna clase de equivalencia que sea con menos de 4000 de valoracion,
	// por lo que al siempre dar mayor a este numero, no es posible testear esta clase de equivalencia.

	test "Falsedad del metodo bienValorados" {
		assert.notThat(compraValoracion.bienValorados() == [laMetamorfosis])
	}

	test "Nombres de autores de la compra de los libros elPrincipito y elViejoYElMar, siendo estos: Antoine de Saint-Exupéry y Ernest Hemingway" {
		assert.that(compraAutores.nombresAutores() == ["Antoine de Saint-Exupéry", "Ernest Hemingway"])
	}
	test "Nombres de autores de la compra de los libros elPrincipito y elViejoYElMar, probando la falsedad" {
		assert.notThat(compraAutores.nombresAutores() == ["Antoine de Saint-Exupéry", "Suzanne Collins"])
		// Suzanne Collins no es el autor de "elViejoYElMar"
	}

}


